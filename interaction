def construction_abri(cap , source_inf , vegr , veg , s , jourres , abri):
    """float*bool*int*float*int*bool => bool*int*bool*bool"""
    #sauve:bool
    sauve = False
    #rand:float
    if jourres != 0:
        jourres = jourres - 1
    else:
        abri = True
    if jourres == -11 or vegr == 0:
        jourres = ((45/(cap*0.5)//10 * 1/(veg/5)))/1.
        abri = False
        source_inf = False
        rand = np.random.random_sample()
        if rand < s:
            sauve = True
    jourres = jourres//1
    if cap >= 0.9 and veg > 1 :
        jourres = 1.0
    return jourres , abri , sauve , source_inf



def trouver_eau(p_eau , capadap , source_inf , hydrat):
    """float*float*bool*float => bool*float"""
    if source_inf == 1:
        hydrat = 1
    else:
        rand = 0.39
    if rand <= 0.4*p_eau*(2*capadap):
        hydrat = hydrat + 0.2
    elif rand <= p_eau*(2*capadap) :
        hydrat = hydrat + 0.4
        rand = 0.3
        if rand > 0.4:
            source_inf = True
    if hydrat > 1:
        hydrat = 1
    return source_inf , hydrat






*
interaction animaux

def inter_anim(p_a, p_ap, force, capadap, alimentation, sante):
  """
  float ^6 -> float ^2
  hyp : 
  """
  
  chose random1 (0,1,0.1)
    if random1 <= p_a : 
      chose random2 (0,1,0.1)
        if random2 <= p_ap :
           inter_pred(force, capadap, alimentation, sante)
        else :
          alimentation = alimentation + 0.15
        
return alimetation, sante


interaction avec animal dangereux

def inter_pred(force, capadap, alimentation, sante):
    """
    float * float * float * float -> float * float 
    hyp : random2 <= p_a
    rend le niveau d alimentation et de sante apres une rencontre avec un animal dangereux 
    """
    #force_1 : int
    force_1 = force - 0.4 + 1
    
    #capadap_1 : int
    capadap_1 = capadap - 0.3 + 1
    
    
    chose random4(0,1)
    combat = random4*force_1*capadap_1

    if combat <= 0.1 :
        sante = 0
    elif combat <=0.4 :
        sante = sante - ((1-10*(random4-0.1)/3)/2)
    elif combat <= 0.7 : 
        sante = sante - ((1-10*(random4-0.1)/3)/2)
        alimentation = alimentation + 0.15
    else :
        alimentation = alimentation + 0.15

    return alimentation, sante






interactions vegetaux

inter_veget

entree: p_vg, alimentation, capadap
sortie: alimentation

while veg>0:
  choose randoma(0,1,0,1)
    while randoma * capadap > p_vg:
    ###(choose randomb(0,1,0,1)
          if randomb > p_emp * (facteur * capadap):
      santé diminue
    else)###
      alimentation += 1*(facteur * capadap)
      veg=veg-1
      p_vg= p_vg * teta (facteur de decroissance pour trouver vegetaux)
   end boucle
   ****
   santé= delta (facteur qlqconque) * alimentation
   jour= jour+1
   ***
 end boucle
 switch zone
 
 
 def inter_veget(veg,alimentation,capadap,vegre):
    """int*float*float=>int*float"""
    #p_vg:float
    p_vg=0.9
    #trouve:bool
    trouve=True
    #vegr:int
    vegr=vegre
    if vegr == 0:
        vegr = veg
    rand=[random]
    while veg>0 or trouve==True:
        if rand * capadap < p_vg:
            alimentation = 1*(facteur * capadap):
            vegr = vegr - 1
            p_vg = p_vg-1
        else:
            trouve=False
    return alimentation , vegr
   
   
   
force en fonction de l'alimentation et hydratation

def sante_fct_hydr_alim(alimentation,hydratation,sante):
    """float³=>float
    force en fonction de l'alimentation et hydratation"""
    if alimentation >= 0.5 and hydratation >=0.5:
        if sante<0.3:
              sante = 0.3
        else:
              sante = sante + 0.1
    elif alimentation<0.5 :
        if hydratation<0.5:
            sante = sante - ((0.5-alimentation)*0.5 + (0.5-hydratation)*0.8)
        else:
            sante = sante - (0.5-alimentation)*0.4
    else:
        sante = sante - (0.5-hydratation)*0.84
    if sante > 1.0 :
        sante = 1.0
    return sante
   
etre secouru


def secour(p_s, j):
    """
    float * int -> bool 
    hyp :
    retourne si l agent est secouru par une equipe de secours
    """"

    #p_s_ini : p_s initiale
    p_s_ini = p_s
    #p_s_10 : p_s a 10 jours
    p_s_10 = 0


    if j <= 10 :
      p_s = p_s + p_s_ini*1.1
    elif j <= 25 :
      p_s_10 = p_s
    else :
      p_s = p_s - p_s_10*1.1
    
    chose random5(0,1)
    return random5 <= p_s



boucle journaliere

entree : agent biome
sortie : nombre de jours cause de fin

#c : cause de la fin
c = ""
#j : compteur jour
j = 1
while sante > 0 or sauve != 0 :
  jour_r , abri , sauve , sourceinf = construction_abri(capadap , veg , vegr , p_v , jour_r)
  hydrat , sourceinf = trouver_eau (p_e , capadap , sourceinf)
  alimentation, sante = inter_anim(p_a, p_ap, force, capadap, alimentation, sante)
  alimentation = inter_veget(p_vg, alimentation, capadap)
  sante = force_fct_hydrat_alim(alimentation, hydrat, sante)
  hydrat=hydrat-0.3
  j = j + 1


return j, c










