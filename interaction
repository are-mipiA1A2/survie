def construction_abri(cap , eau , vegr , veg , s , jourres , abri):
  """float*float*int*float*int*bool => bool*int*bool*bool"""
  if jourres == -10 or vegr == 0:
    jourres = (equa jourres)
    abri = False
    sourceinf = False
    rand = [random]
    if rand < s:
      sauve == True
  if jourres != 0:
    jourres = jourres - 1
  else:
    abri = True
  return jourres , abri , sauve , source_inf








*
interaction animaux

inter_anim

entrée : p_a, p_ap, force, capadap, alimentation, sante
sortie : alimentation, sante

chose random1 (0,1,0.1)
  if random1 <= p_a : 
    
    chose random2 (0,1,0.1)
      if random2 <= p_ap :
        -> inter_preda (force, capadap, alimentation, sante => alimentation, sante)
      else :
        alimentation up
        
return alimetation, sante


interaction avec predateur

def inter_pred(force, capadap, alimentation, sante):
    """ float * float * float * float -> float * float 
        hyp : random2 <= p_a
        rend le niveau d alimentation et de sante apres une rencontre avec un animal predateur












interactions vegetaux

inter_veget

entree: p_vg, alimentation, capadap
sortie: alimentation

while veg>0:
  choose randoma(0,1,0,1)
    while randoma * capadap > p_vg:
    ###(choose randomb(0,1,0,1)
          if randomb > p_emp * (facteur * capadap):
      santé diminue
    else)###
      alimentation += 1*(facteur * capadap)
      veg=veg-1
      p_vg= p_vg * teta (facteur de decroissance pour trouver vegetaux)
   end boucle
   ****
   santé= delta (facteur qlqconque) * alimentation
   jour= jour+1
   ***
 end boucle
 switch zone
   
force en fonction de l'alimentation et hydratation

force_fct_hydr_alim
 
 entree: alimentation, hydratation,sante
 sortie: sante
 
 if alimentation > 0,5 and hydratation >0,5
  if sante<0,3:
    sante = 0.3
  else
    sante = sante + 0,01
 elif alimentation<0,5 
  if hydratation<0,5:
    sante = sante * (r(0,5-alimentation) + h(0,5- hydratation))
  else:
    sante = sante * r(0,5- alimentation)
 else:
  sante = sante * h(0,5-hydratation)
return sante
   
etre secouru

  secour

entree : p_s, j
sortie : bool
#p_s_ini : p_s initiale
p_s_ini = p_s
#p_s_10 : p_s a 10 jours
p_s_10 = 0


if j <= 10 :
  p_s = p_s + p_s_ini*1.1
elif j <= 25 :
  p_s_10 = p_s
else :
  p_s = p_s - p_s_10*1.1





boucle journaliere

entree : agent biome
sortie : nombre de jours cause de fin

#c : cause de la fin
c = ""
#j : compteur jour
j = 1
while sante > 0 or sauve != 0 :
  jour_r , abri , sauve , sourceinf = construction_abri(capadap , veg , vegr , p_v , jour_r)
  hydrat , sourceinf = trouver_eau (p_e , capadap , sourceinf)
  alimentation, sante = inter_anim(p_a, p_ap, force, capadap, alimentation, sante)
  alimentation = inter_veget(p_vg, alimentation, capadap)
  sante = force_fct_hydrat_alim(alimentation, hydrat, sante)
  j = j + 1


return j, c










